#!/bin/bash


#adding a kvm
modprobe kvm
#update and install libvirt and a tool for making .iso for cloud-config
apt update
apt  install -y qemu libvirt-bin genisoimage virtinst

#adding a conf file as a data source
. ./config
#making directory for xml templates
mkdir -p ./networks

#generating MAC for external if on VM1
MAC=52:54:00:`(date; cat /proc/interrupts) | md5sum | sed -r 's/^(.{6}).*$/\1/; s/([0-9a-f]{2})/\1:/g; s/:$//;'`


#making templates fot lib networks
echo "
<network>
    <name>$INTERNAL_NET_NAME</name>
    <bridge name='internalbr' />
</network>
" > ./networks/${INTERNAL_NET_NAME}.xml

echo "
<network>
    <name>$MANAGEMENT_NET_NAME</name>
    <bridge name='managementbr' />
    <forward mode='route'/>
    <ip address='$MANAGEMENT_HOST_IP' netmask='$MANAGEMENT_NET_MASK' />
</network>
" > ./networks/${MANAGEMENT_NET_NAME}.xml

echo "
<network>
    <name>$EXTERNAL_NET_NAME</name>
    <bridge name='externalbr' />
    <ip address='$EXTERNAL_NET_HOST_IP' netmask='$EXTERNAL_NET_MASK'>
    <forward mode='nat' />
        <dhcp>
            <range start='$VM1_EXTERNAL_IP' end='$VM1_EXTERNAL_IP' />
         <host mac='$MAC' name='$VM1_NAME' ip='$VM1_EXTERNAL_IP'/>

</dhcp>
    </ip>
</network>
" > ./networks/${EXTERNAL_NET_NAME}.xml

#creating networks from templates
virsh net-define ./networks/${INTERNAL_NET_NAME}.xml
virsh net-define ./networks/${MANAGEMENT_NET_NAME}.xml
virsh net-define ./networks/${EXTERNAL_NET_NAME}.xml

virsh net-start $INTERNAL_NET_NAME
virsh net-start $EXTERNAL_NET_NAME
virsh net-start $MANAGEMENT_NET_NAME

virsh net-autostart $INTERNAL_NET_NAME
virsh net-autostart $EXTERNAL_NET_NAME
virsh net-autostart $MANAGEMENT_NET_NAME



#making directory for config files of VMs
mkdir -p ./config-drives/vm1-config ./config-drives/vm2-config

#create meta-data dir and files for VMs
echo "instance-id: iid-${VM1_NAME}
local-hostname: $VM1_NAME
" >./config-drives/vm1-config/meta-data

echo "instance-id: iid-${VM2_NAME}
local-hostname: $VM2_NAME
" >./config-drives/vm2-config/meta-data

#making cloud-config for VMs
echo "#cloud-config
#ssh_svcname: ssh
runcmd:
  - ip link set $VM1_MANAGEMENT_IF down && ip link set $VM1_MANAGEMENT_IF up
<<<<<<< HEAD
  - ip addr add $VM1_MANAGEMENT_IP/$MANAGEMENT_NET_MASK dev $VM1_MANAGEMENT_IF

=======
  - ip addr add $VM1_MANAGEMENT_IP/$MANAGEMENT_NET_MASK
>>>>>>> 4211607fb6ff9d08342d112fae60ac40cf0e3aac
" > ./config-drives/vm1-config/user-data


echo "#cloud-config
#ssh_svcname: ssh
runcmd:
  - ip link set $VM2_MANAGEMENT_IF down && ip link set $VM2_MANAGEMENT_IF up
<<<<<<< HEAD
  - ip addr add $VM2_MANAGEMENT_IP/$MANAGEMENT_NET_MASK dev $VM2_MANAGEMENT_IF
=======
  - ip addr add $VM2_MANAGEMENT_IP/$MANAGEMENT_NET_MASK
>>>>>>> 4211607fb6ff9d08342d112fae60ac40cf0e3aac
" > ./config-drives/vm2-config/user-data

#making iso files for cloud-config
mkisofs -R -V cidata -joliet -o $VM1_CONFIG_ISO ./config-drives/vm1-config
mkisofs -R -V cidata -joliet -o $VM2_CONFIG_ISO ./config-drives/vm2-config

#making a directories to store "hdd" of VMs
mkdir -p $(dirname "${VM1_HDD}")
mkdir -p $(dirname "${VM2_HDD}")

#download image and making a "hdd" for VM1 from it
wget $VM_BASE_IMAGE -O $VM1_HDD
qemu-img resize $VM1_HDD +100GB
#copying "hdd" of VM1 to create VM2
cp $VM1_HDD $VM2_HDD

#installing a VM1
sudo virt-install \
--import \
--name $VM1_NAME \
--ram $VM1_MB_RAM \
--vcpus $VM1_NUM_CPU \
--disk ${VM1_HDD},format=qcow2,bus=virtio \
--disk ${VM1_CONFIG_ISO},device=cdrom \
--network bridge=externalbr,model=virtio,mac=$MAC \
--network bridge=internalbr,model=virtio \
--network bridge=managementbr,model=virtio \
--graphics none \
--noautoconsole
